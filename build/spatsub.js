/*! KdAndQuadTreesDemo 2020-05-07 */
require(["geom","plotter","kdtree","quadtree"],function(a,b,c,d){const e={color:"red",width:2},f={color:"black",width:1},g=[[0,100],[100,100],[100,0]],h={color:"blue",size:9},i="markers",j={kdtree:c,quadtree:d},k=40;new Vue({el:"#app",data:{points:[],numPoints:0,numLeaves:0,maxLeafDepth:0,countString:""+k,depthString:"0",depth:0,algorithm:"kdtree",togglefileuploadhelp:!1},mounted:function(){this.addPoints()},computed:{decrementDisabled:function(){return Boolean(0===this.depth)}},watch:{depthString:function(){this.depth=parseInt(this.depthString),this.start()}},methods:{upload:function(a){var b=new FileReader,c=a.target.files[0],d=this;b.onload=function(a){d.clear();for(var b=a.target.result,c=b.match(/[0-9]+/g),e=0;e<c.length;e+=2)d.points.push([parseInt(c[e]),parseInt(c[e+1])]);d.start()},b.readAsText(c)},resetfile:function(a){this.$refs.file.value=""},clear:function(){this.points=[],this.depthString="0"},start:function(){var a;this.tree_constructor=j[this.algorithm],a=new this.tree_constructor(this.points,this.depth),this.numLeaves=a.numLeaves(),this.maxLeafDepth=a.maxLeafDepth(),this.plot(a)},addPoints:function(){function a(a,b){return d.points.find(function(c){return c[0]==a&&c[1]==b})}for(var b,c,d=this,e=0;e<parseInt(this.countString);)b=Math.floor(100*Math.random()),c=Math.floor(100*Math.random()),a(b,c)||(this.points.push([b,c]),e+=1);this.numPoints=this.points.length,this.start()},plot:function(a){var c,d,j,k;if(k=i,b.plot(this.points,k,{marker:h},!0),b.plot(g,"lines",{line:f}),this.depth>0){c=a.lines(),j=[];for(var l=0;l<c.length;l++)d=c[l],j=j.concat(d.points);b.plot(j,"multiline",{line:e})}}}})});